Using Advanced CSS features
LECTURE 1:
Converting CSS to SCSS code
-We will be converting our code to SCSS
-Then we use the BM to nest our selectors

Lecture 2:
Implementing the 7-1 CSS archtiecture with SASS
-Here we create 7 main folders and one main SCSS file to import all files in these folders
-Create the base folder inside Sass  folder and we have a sass folder init called base.scss whih 
has resets and styles for body.
-We shd be able to import this file to the main SCSS file
-Partial files always start with an underscore
-We also include animation files and typography
-Utilities
-This archtiecture is intended to handle large websites 


-We have a folder called abstract thats contains variables, mixins
-We will create our components folder
-Components are held together by the layout of the page
-We need a layout folder for each piece of the entire project so we will have a global footer,
header
-we create page folder for styling individual pages

-We also have themes folder and vendors folder ie animation framework, icon system or bootstrap
-For now we will leave these empty

-btn is a component bse its reusable across the page
-We create a button.scss in the components folder

-We shall treat the header as a layout component bse we may need a header on multiple pages
-Header is better organised as a typography than a layout

Lecture 3:
Review of Basic principes of Responsive Design and Layout types

--1St:
Use of Fluid Grids and Layouts
-So here we use percentages rather than pixels for all layout related length esp width
this is done to enable the content easily adapt to the current view port

--2nd
Flexible and Responsive Images
-Images behave a bit different from text bse they donot scale automatically as we change the view port
-So we need to make images adapt nicely to current view port
-We make images flexible by defining their dimensions in percentages

--3rd
Media Queries
-These enable us to change styles on certain view port width called break points
-This allows developers create different versions of a website for different devices

there are three main ways of laying out a webpage
-float layouts like float left
-Flex box enables you layout multiple elements in a single dimension
-CSS grids is perfect for creating the overall layout of page in fully-fledged 2D grid

Lecture 4
Building a custom Grid with floats
-How to architect and build a simple grid system
-We will learn how the attribute selector works, how the powerful not pseudo-class works
-How calc() function works
-whats the differnece btn simple sass mathematical operations

-A Grid is a design which allows us to build consistent interfaces
-All columns should be in a container called row
- 10px = 1rem
-max width implies that if we have enough available space, then it has the width we specified bt if the viewport is smaller
than 114rem then it fills 100% of available space
-The margin-bottom and max-width can be placed in variable

Not pseudo Selector
--Here we select everything except the last column 

-Since we have column inside of row, we can nest it in the selectors
The total width of column is 100%
to get half the width plus gutter space
-We use the cal function to perform this operation.
-This allows us to make calculations where we can add units

-When performing gutter, it should be on all the righ margiins except the last one
-A clear fix is a mixin that we use in our files
-We will use atrribute selector 
-we will select basing on class wch selects all the elements in which the class attribute starts

Lecture 5:
Building the About Section 1
-We will learn how to think abt components
-how and why to use utility classes
-how to use the background-clip property
-How to transform multiple property simultaneously
-how to use the outline-offset property together with outline
-how to style elements that are not hovered

**We are going to talk about the think, build architect mindest
-We have heading, paragraphs which is part of typography
-We have button which is

install emmet
-We use 25rem in padding to cover up the triangular space created by the clip path in section for header
-We give it a negative margin to move up

-How to place a gradient on our h2
-How do we make sure the element doesnot occupy 100% of space
-This happens bse its a block element as we do tht
-So we change it to inline block

-We then use the webkit clip-path tool
-This helps us clip the background exactly where the text is
-We make the text transparrent so tht we see only the image

-to perform animation effects

-to place the text in the center, we wrapthe text in a parent element then center it from there
-we shall use utility classes to center the text
-we need to have a utility margin for our project

Lecture 6:
Building the About Section 2
-on the text content, we will have h3 headings and paragrapghs
-try to make the lorem text not the same
-heading-tetiary is going to our typography

-How to set margin btn heading h3 and paragraph
-so we add the utility class
-we are going to place a button
-We can use the html code instead of font icons, we can get them at

*******************codingheros.io/resources************
-to style the button, we move to the button component

Lecture 7:
Building the About Section 3
-The images we are going to place are in different positions so we need a modifier
-The BEM structure
-we create a composition.scss file in components

-we use absolute positioning to place the pictures on top of the other
-the absolute positioning needs to be placed relative to the parent component which is 
composition in this case

-so we place the images in the different places one by one
-to implement the hover effect to zoom in and out of the image

**we always have to define the width of images in % to help in responsive design

-to make elements overlap over the other, we use z-index
-we set z-index on parent element jst like position relative
-then the next z-index will be higher

-we then implement the border property on the images
we use outline instead of border to enable us perform extra functionalities
-we can perform the outline offset with outline property

-to make the other images decrease in size when we zoom on one image

Lecture 8:
Building the Features Section
-We will learn how to include and use icon fonts
-Another way of creating skewed designs
-How and when to use the direct child selector
so here we have the four features of the company

*************we use icons from linea.io icons***********

-download all sets
-move to basics, then iconfonts
-its better to use icons instead of .PNG bse its easier to scale them
-we get the style.css file and the fonts folder
-we include it in out html before our custom css

**icon-font.css operation
-it includes fonts in the fonts folder
-we will use all the different font formats like svg, eot bse different browsers understand different types
-open the html with icon and copy the icon you want
-all these icons start with a basic like icon-pencil

-writing the markup, we need a row with 4 columns with a feature element
-feature-box can be a component bse its reused through out the page

-add section about features
-performing the skew design
-to place the boxex straight, we skew the text opposite from the section skew
-we use > to select direct child not all the children bt the immediate children wch is the row

Lecture 9
Buiding tours section part 1
-how to build an amazing, rotating created
-how to use perspective in css
-how to use backface-visibility property
-using background blend modes
-how and when to use box-decoration-break

--start Implementing card component
-we use transition:rotateY(180deg)
-when we rotate the card, it turns and moves text to right corner
-we use perspective to remove the rough edges when turning to make it appear as though its coming to you.

-how do we make sure we see one side of card and when we hover, we see the other side text

-the back side is already 180deg before we turn it, so when we hover, it moves 180deg
-so its ony the front side that rotates 180deg, the bakside doesnot

-to make the flip complete, they need to be ontop of the other
-we use absolute positioning
-when we perform absolute positioning, the card fits the red and green color into the width
-we solve this by giving the side a width of 100%
-we use the backface visibility to hide the back part of an element

-when we implement the backface-visibility, the card loses its height bse all the elements are in position absolute
so they are taken out of their natural flow
-with absolute, we cant use clear fix to solve the problem, so
the height of the card shd be 50

-we can also use the transition timing function like ease-in, ease-out

Lecture 10
Building the tours section part 2
-we are going to style the card
-on the card, we have a bk-image, text and color
-we use background image in css and not img image in html bse we are going to deal with some background blend modes

-if we dont give the image a height, it will not appear

**Background Blend modes
-This describes how elements, background images should blend ie if we have muiltiple images and we want them to blend
-so we blend the image with a linear gradient

-we have muiltiple background blend modes like dodge, color-burn wch are mainly used in photoshop
-when we perfrom the blend effect, the corners are nolonger rounded bse the image is overlapping the parent element.
-to round the columns
-on the card property after border-radius, we can set the property to overflow:hidden

-we need to place the header text ontop of image, we use absolute positioning

*how to apply css on the header text
-we sue box-decoration breaks
-we create a new element inside of h4

-the clone applies all the declarations in the selector wch in this case in padding to all the boxes

-we want to have aline underneath the text bt we dont want it to go all across the card
-so we use width

-to center a block element inside ablock element, we use margin 0 auto

NB::we can only have one relative positon for an element then the rest are absolute positioning in relation to the relative
positioning


Lecture 11
Building the tours section part 3
-to solve the button text breaking, we give the box a width

-placing the button
-we add a helper class for margin-top
-we make a green button component